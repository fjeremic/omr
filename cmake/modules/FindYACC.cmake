find_program(YACC_EXECUTABLE NAMES yacc DOC "path to the YACC executable")
mark_as_advanced(YACC_EXECUTABLE)

if(YACC_EXECUTABLE)
  # internal macro
  # sets YACC_TARGET_cmdopt
  macro(YACC_TARGET_option_extraopts Options)
    set(YACC_TARGET_cmdopt "")
    set(YACC_TARGET_extraopts "${Options}")
    separate_arguments(YACC_TARGET_extraopts)
    list(APPEND YACC_TARGET_cmdopt ${YACC_TARGET_extraopts})
  endmacro()

  # internal macro
  # sets YACC_TARGET_output_header and YACC_TARGET_cmdopt
  macro(YACC_TARGET_option_defines YACCOutput Header)
    if("${Header}" STREQUAL "")
      # default header path generated by YACC (see option -d)
      string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\2" _fileext "${YACCOutput}")
      string(REPLACE "c" "h" _fileext ${_fileext})
      string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\1${_fileext}"
          YACC_TARGET_output_header "${YACCOutput}")
      list(APPEND YACC_TARGET_cmdopt "-d")
    else()
      set(YACC_TARGET_output_header "${Header}")
	  if(OMR_HOST_OS STREQUAL "zos")
	    list(APPEND YACC_TARGET_cmdopt "-D${YACC_TARGET_output_header}")
	  else()
        list(APPEND YACC_TARGET_cmdopt "--defines=${YACC_TARGET_output_header}")
      endif()
    endif()
  endmacro()

  #============================================================
  # YACC_TARGET (public macro)
  #============================================================
  #
  macro(YACC_TARGET Name YACCInput YACCOutput)
    set(YACC_TARGET_outputs "${YACCOutput}")
    set(YACC_TARGET_extraoutputs "")

    # Parsing parameters
    set(YACC_TARGET_PARAM_OPTIONS
      )
    set(YACC_TARGET_PARAM_ONE_VALUE_KEYWORDS
      COMPILE_FLAGS
      DEFINES_FILE
      )
    cmake_parse_arguments(
        YACC_TARGET_ARG
        "${YACC_TARGET_PARAM_OPTIONS}"
        "${YACC_TARGET_PARAM_ONE_VALUE_KEYWORDS}"
		"${LEX_TARGET_MULTI_VALUE_KEYWORDS}"
        ${ARGN}
    )

    if(NOT "${YACC_TARGET_ARG_UNPARSED_ARGUMENTS}" STREQUAL "")
      message(SEND_ERROR "Usage")
    else()

      YACC_TARGET_option_extraopts("${YACC_TARGET_ARG_COMPILE_FLAGS}")
      YACC_TARGET_option_defines("${YACCOutput}" "${YACC_TARGET_ARG_DEFINES_FILE}")

      list(APPEND YACC_TARGET_outputs "${YACC_TARGET_output_header}")

      add_custom_command(OUTPUT ${YACC_TARGET_outputs}
        COMMAND ${YACC_EXECUTABLE} ${YACC_TARGET_cmdopt} -o ${YACCOutput} ${YACCInput}
        VERBATIM
        DEPENDS ${YACCInput}
        COMMENT "[YACC][${Name}] Building parser with YACC"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
		
      # define target variables
      set(YACC_${Name}_DEFINED TRUE)
      set(YACC_${Name}_INPUT ${YACCInput})
      set(YACC_${Name}_OUTPUTS ${YACC_TARGET_outputs} ${YACC_TARGET_extraoutputs})
      set(YACC_${Name}_COMPILE_FLAGS ${YACC_TARGET_cmdopt})
      set(YACC_${Name}_OUTPUT_SOURCE "${YACCOutput}")
      set(YACC_${Name}_OUTPUT_HEADER "${YACC_TARGET_output_header}")

    endif()
  endmacro()
  #
  #============================================================

endif()